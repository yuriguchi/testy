services:
  nginx:
    container_name: nginx
    image: nginx:1.25.1-alpine
    ports:
      - '80:80'
      - '443:443'
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - testy-static:/opt/testy/testy/testy-static
      - ./nginx/testy-prod.conf.template:/etc/nginx/templates/testy-prod.conf.template
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - media_data:/opt/testy/testy/media
      - build_data:/opt/testy-frontend/build
      - ${SSL_CERT_KEY_PATH}:/etc/ssl/private/cert.key
      - ${SSL_CERT_PATH}:/etc/ssl/certs/cert.crt
    depends_on:
      - client
      - testy
  client:
    container_name: testy-frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - '/app/node_modules'
      - 'build_data:/app/build'
    environment:
      - NODE_ENV=production
    user: "${UID}:${GID}"
  testy:
    container_name: testy
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    build:
      context: ./backend/testy
      dockerfile: scripts/Dockerfile
      args:
        - ENV=prod
    image: testy:latest
    pull_policy: build
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - 'media_data:/testy/media'
      - 'testy-static:/testy/testy-static'
    environment:
      - DJANGO_SETTINGS_MODULE=root.settings.production
    ports:
      - '8001:8000'
    command: scripts/entrypoint.sh
    depends_on:
      pgbouncer:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4g

  db:
    container_name: testy_db
    image: postgres:14.5-alpine
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - 'pg_data:/var/lib/postgresql/data'
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5
    ports:
      - '5435:5432'
    shm_size: '1gb'

  pgbouncer:
    container_name: testy_pgbouncer
    image: edoburu/pgbouncer:1.22.1-p0
    env_file:
      - ${ENV_FILE:-.env}
    ports:
      - "5436:5432"
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -h ${DB_HOST} -U ${POSTGRES_USER}" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      db:
        condition: service_healthy

  redis:
    container_name: testy_redis
    image: redis:alpine
    command: redis-server --appendonly yes
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - 'redis_data:/data'
    ports:
      - '6380:6379'
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 5s
      timeout: 5s
      retries: 5

  celery:
    container_name: testy_celery
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    restart: always
    image: testy:latest
    pull_policy: build
    command: celery -A root worker -B -l INFO
    env_file:
      - ${ENV_FILE:-.env}
    volumes:
      - 'media_data:/testy/media'
      - 'testy-static:/testy/testy-static'
    environment:
      - DJANGO_SETTINGS_MODULE=root.settings.production
    healthcheck:
      test: [ "CMD-SHELL", "celery -b ${CELERY_BROKER_URL} inspect ping" ]
      interval: 5s
      timeout: 5s
      retries: 5
    depends_on:
      - redis
      - pgbouncer
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4g

  notification-worker:
    container_name: notifications
    extra_hosts:
      - 'host.docker.internal:host-gateway'
    image: testy:latest
    pull_policy: build
    restart: always
    env_file:
      - ${ENV_FILE:-.env}
    depends_on:
      - testy
    command: python manage.py runworker notifications

volumes:
  pg_data:
  media_data:
  build_data:
  testy-static:
  redis_data: