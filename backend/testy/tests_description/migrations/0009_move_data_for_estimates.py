# Generated by Django 3.2.4 on 2023-10-18 14:26

from datetime import timedelta
from django.db import migrations, transaction
from testy.utilities.time import WorkTimeProcessor


@transaction.atomic
def set_test_case_estimate_in_seconds(apps, schema_editor):
    cases = []
    versions = []
    test_case_model = apps.get_model('tests_description', 'TestCase')
    test_case_history_model = apps.get_model('tests_description', 'HistoricalTestCase')
    for test_case in test_case_model.objects.filter(estimate__isnull=False):
        test_case.estimate_tmp = WorkTimeProcessor.seconds_to_day(test_case.estimate.total_seconds())
        cases.append(test_case)
        for version in test_case_history_model.objects.filter(id=test_case.id, estimate__isnull=False):
            version.estimate_tmp = WorkTimeProcessor.seconds_to_day(version.estimate.total_seconds())
            versions.append(version)
    test_case_history_model.objects.bulk_update(versions, ['estimate_tmp'])
    test_case_model.objects.bulk_update(cases, ['estimate_tmp'])


@transaction.atomic
def set_test_case_estimate_in_interval(apps, schema_editor):
    cases = []
    versions = []
    test_case_model = apps.get_model('tests_description', 'TestCase')
    test_case_history_model = apps.get_model('tests_description', 'HistoricalTestCase')
    for test_case in test_case_model.objects.filter(estimate_tmp__isnull=False):
        actual_seconds = WorkTimeProcessor.seconds_to_day(test_case.estimate_tmp, False)
        test_case.estimate = timedelta(seconds=actual_seconds)
        cases.append(test_case)
        for version in test_case_history_model.objects.filter(id=test_case.id, estimate_tmp__isnull=False):
            actual_version_seconds = WorkTimeProcessor.seconds_to_day(version.estimate_tmp, False)
            version.estimate = timedelta(seconds=actual_version_seconds)
            versions.append(version)
    test_case_history_model.objects.bulk_update(versions, ['estimate'])
    test_case_model.objects.bulk_update(cases, ['estimate'])


class Migration(migrations.Migration):
    dependencies = [
        ('tests_description', '0008_added_estimate_tmp'),
    ]

    operations = [
        migrations.RunPython(
            set_test_case_estimate_in_seconds,
            set_test_case_estimate_in_interval
        )
    ]

