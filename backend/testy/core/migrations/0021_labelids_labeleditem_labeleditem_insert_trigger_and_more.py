# Generated by Django 4.2.13 on 2024-10-16 13:55

import logging

import django.contrib.postgres.fields
from django.contrib.contenttypes.models import ContentType
from django.contrib.postgres.aggregates import ArrayAgg
from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations
from django.db.models import Q


def fill_label_ids(apps, schema_editor):
    from testy.tests_description.models import TestCase
    LabelIds = apps.get_model('core', 'LabelIds')
    try:
        ct = ContentType.objects.get_by_natural_key('tests_description', 'testcase')
    except ContentType.DoesNotExist:
        logging.warning('Content type for test case does not exist')
        return
    instances = []
    cases = TestCase.objects.all().annotate(
        label_ids_annotated=ArrayAgg('labeled_items__label__id', distinct=True,
                                     filter=Q(labeled_items__is_deleted=False))
    ).values('label_ids_annotated', 'id')
    for case in cases:
        instances.append(
            LabelIds(
                ids=case['label_ids_annotated'],
                content_type_id=ct.pk,
                object_id=case['id']
            )
        )
    LabelIds.objects.bulk_create(instances, batch_size=500)


class Migration(migrations.Migration):

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        ('core', '0020_rename_status_specific_temp_customattribute_status_specific'),
    ]

    operations = [
        migrations.CreateModel(
            name='LabelIds',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('ids', django.contrib.postgres.fields.ArrayField(base_field=models.BigIntegerField(), blank=True, default=list, size=None)),
                ('object_id', models.PositiveIntegerField()),
            ],
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='labeleditem',
            trigger=pgtrigger.compiler.Trigger(name='labeleditem_insert_trigger', sql=pgtrigger.compiler.UpsertTriggerSql(func='BEGIN\n    IF EXISTS (SELECT 1\n               FROM core_labelids\n               WHERE content_type_id = NEW.content_type_id\n                 AND object_id = NEW.object_id) THEN\n        UPDATE core_labelids\n        SET ids = array_append(ids, NEW.label_id)\n        WHERE content_type_id = NEW.content_type_id\n          AND object_id = NEW.object_id;\n    ELSE\n        INSERT INTO core_labelids (ids, is_deleted, content_type_id, object_id)\n        VALUES (ARRAY [NEW.label_id], FALSE, NEW.content_type_id, NEW.object_id);\n    END IF;\n\n    RETURN NEW;\nEND;', hash='e22005fe46692071b3c908fbf1c143a57d6fdcfd', operation='INSERT', pgid='pgtrigger_labeleditem_insert_trigger_5794d', table='core_labeleditem', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='labeleditem',
            trigger=pgtrigger.compiler.Trigger(name='labeleditem_soft_delete_trigger', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (NEW."is_deleted" AND NOT OLD."is_deleted")', func='BEGIN\n    UPDATE core_labelids\n    SET ids = array_remove(ids, OLD.label_id)\n    WHERE content_type_id = OLD.content_type_id\n      AND object_id = OLD.object_id;\n    DELETE FROM core_labelids\n    WHERE content_type_id = OLD.content_type_id\n      AND object_id = OLD.object_id\n      AND array_length(ids, 1) = 0;\nRETURN OLD;\nEND;', hash='1c952acd5ad3a7155c41bbbcb177e8da5099066b', operation='UPDATE', pgid='pgtrigger_labeleditem_soft_delete_trigger_60138', table='core_labeleditem', when='AFTER')),
        ),
        migrations.AddField(
            model_name='labelids',
            name='content_type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.contenttype'),
        ),
        migrations.AddConstraint(
            model_name='labelids',
            constraint=models.UniqueConstraint(fields=('content_type', 'object_id'), name='label_ids_unique_constraint'),
        ),
        migrations.RunPython(fill_label_ids, reverse_code=migrations.RunPython.noop),
    ]
