# Generated by Django 4.2.13 on 2025-01-10 09:47
from django.contrib.contenttypes.models import ContentType
from django.db import migrations, transaction

fields_mapping = {
    'testresult': ['status_specific', 'is_required', 'suite_ids'],
    'testcase': ['is_required', 'suite_ids'],
    'testplan': ['is_required'],
    'testsuite': ['is_required'],
}

def set_values_to_json(applied_to, custom_attribute):
    for field_name in applied_to.keys():
        for mapping_key in fields_mapping.get(field_name):
            applied_to[field_name][mapping_key] = getattr(custom_attribute, mapping_key)
    return applied_to

@transaction.atomic
def move_data_to_json(apps, schema_editor):
    attributes = []
    attributes_model = apps.get_model('core', 'CustomAttribute')
    custom_attributes = attributes_model.objects.all()
    content_types = list(ContentType.objects.all().values('id', 'model'))
    for custom_attribute in custom_attributes:
        applied_to = {}
        for content_type_id in custom_attribute.content_types:
            content_type_instance = next((ct for ct in content_types if ct['id'] == content_type_id), {})
            content_type_name = content_type_instance.get('model')
            content_type_mapping = fields_mapping.get(content_type_name, [])
            if not all([content_type_instance, content_type_name, content_type_mapping]):
                continue
            applied_to[content_type_name] = dict.fromkeys(content_type_mapping, {})
            custom_attribute.applied_to = set_values_to_json(applied_to, custom_attribute)
        attributes.append(custom_attribute)
    attributes_model.objects.bulk_update(attributes, ['applied_to'], batch_size=1000)

@transaction.atomic
def move_data_from_json(apps, schema_editor):
    attributes = []
    attributes_model = apps.get_model('core', 'CustomAttribute')
    custom_attributes = attributes_model.objects.all()
    content_types = list(ContentType.objects.all().values('id', 'model'))
    for custom_attribute in custom_attributes:
        current_content_type_names = list(custom_attribute.applied_to.keys())
        if not current_content_type_names:
            continue
        current_content_type_ids = []
        is_required = False
        status_specific = []
        suite_ids = []
        for content_type_name in current_content_type_names:
            content_type_instance = next((ct for ct in content_types if ct['model'] == content_type_name), {})
            content_type_id = content_type_instance.get('id')
            if content_type_id is None:
                continue
            current_content_type_ids.append(content_type_id)
            is_required = is_required or custom_attribute.applied_to.get(
                content_type_name, {},
            ).get('is_required', False)
            status_specific += custom_attribute.applied_to.get(content_type_name, {}).get('status_specific', [])
            suite_ids += custom_attribute.applied_to.get(content_type_name, {}).get('suite_ids', [])

        custom_attribute.content_types = current_content_type_ids
        custom_attribute.status_specific = list(set(status_specific))
        custom_attribute.suite_ids = list(set(suite_ids))
        custom_attribute.is_required = is_required
        custom_attribute.is_suite_specific = True if suite_ids else False
        attributes.append(custom_attribute)
    attributes_model.objects.bulk_update(
        attributes,
        ['content_types', 'status_specific', 'suite_ids', 'is_required', 'is_suite_specific'],
        batch_size=1000,
    )


class Migration(migrations.Migration):
    dependencies = [
        ('core', '0024_customattribute_applied_to_and_more'),
    ]

    operations = [
        migrations.RunPython(move_data_to_json, move_data_from_json),
    ]
