# Generated by Django 4.2.13 on 2024-10-24 18:22

from django.db import migrations, models
import django.db.models.deletion
import pgtrigger.compiler
import pgtrigger.migrations

from django.db.models import OuterRef
from testy.utilities.sql import SubCount


def fill_project_statistics(apps, schema_editor):
    Project = apps.get_model('core', 'Project')
    Test = apps.get_model('tests_representation', 'Test')
    TestPlan = apps.get_model('tests_representation', 'TestPlan')
    TestCase = apps.get_model('tests_description', 'TestCase')
    TestSuite = apps.get_model('tests_description', 'TestSuite')
    ProjectStatistics = apps.get_model('core', 'ProjectStatistics')

    cases_count = TestCase.objects.filter(project_id=OuterRef('pk'), is_deleted=False, is_archive=False).values('pk')
    suites_count = TestSuite.objects.filter(project_id=OuterRef('pk'), is_deleted=False).values('pk')
    plans_count = TestPlan.objects.filter(project_id=OuterRef('pk'), is_deleted=False, is_archive=False).values('pk')
    tests_count = Test.objects.filter(project_id=OuterRef('pk'), is_deleted=False, is_archive=False).values('pk')

    projects = Project.objects.all().annotate(
        cases_count=SubCount(cases_count),
        suites_count=SubCount(suites_count),
        plans_count=SubCount(plans_count),
        tests_count=SubCount(tests_count),
    )
    for project in projects:
        ProjectStatistics.objects.create(
            project=project,
            cases_count=project.cases_count,
            suites_count=project.suites_count,
            plans_count=project.plans_count,
            tests_count=project.tests_count,
        )

class Migration(migrations.Migration):

    dependencies = [
        ('core', '0021_labelids_labeleditem_labeleditem_insert_trigger_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectStatistics',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_deleted', models.BooleanField(default=False)),
                ('deleted_at', models.DateTimeField(blank=True, null=True)),
                ('cases_count', models.IntegerField(default=0)),
                ('suites_count', models.IntegerField(default=0)),
                ('tests_count', models.IntegerField(default=0)),
                ('plans_count', models.IntegerField(default=0)),
            ],
            options={
                'abstract': False,
            },
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='insert_statistics_on_project_create', sql=pgtrigger.compiler.UpsertTriggerSql(func='\n                INSERT INTO core_projectstatistics (project_id, cases_count, suites_count, tests_count, plans_count, is_deleted)\n                VALUES (NEW.id, 0, 0, 0, 0, FALSE);\n                RETURN NEW;\n                ', hash='d466a6cb567182fcf4deba5d47272aac0ad23a76', operation='INSERT', pgid='pgtrigger_insert_statistics_on_project_create_edc58', table='core_project', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='project',
            trigger=pgtrigger.compiler.Trigger(name='delete_statistics_on_project_delete', sql=pgtrigger.compiler.UpsertTriggerSql(func='DELETE FROM core_projectstatistics WHERE project_id = OLD.id; RETURN OLD;', hash='cd554d6f9e28e273ba40c8a9152883a3e8cead5a', operation='DELETE', pgid='pgtrigger_delete_statistics_on_project_delete_ce404', table='core_project', when='BEFORE')),
        ),
        migrations.AddField(
            model_name='projectstatistics',
            name='project',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='core.project'),
        ),
        migrations.RunPython(fill_project_statistics, migrations.RunPython.noop)
    ]
