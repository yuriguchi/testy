# Generated by Django 4.2.13 on 2024-11-14 15:53

from django.db import migrations
import pgtrigger.compiler
import pgtrigger.migrations


class Migration(migrations.Migration):

    dependencies = [
        ('tests_representation', '0033_test_tests_count_increment_statistics_on_insert_and_more'),
    ]

    operations = [
        pgtrigger.migrations.RemoveTrigger(
            model_name='test',
            name='tests_count_increment_statistics_on_insert',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='testplan',
            name='plan_path_descendants_trg',
        ),
        pgtrigger.migrations.RemoveTrigger(
            model_name='testplan',
            name='plans_count_increment_statistics_on_insert',
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='test',
            trigger=pgtrigger.compiler.Trigger(name='tests_count_increment_statistics_on_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func=' \n            UPDATE core_projectstatistics \n            SET tests_count = tests_count + 1 \n            WHERE project_id = NEW.project_id;\n            RETURN NEW;\n            ', hash='a15e857b37ce02ec19409f9e66d13fc235c2256b', operation='INSERT', pgid='pgtrigger_tests_count_increment_statistics_on_insert_3d543', table='tests_representation_test', when='BEFORE')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='testplan',
            trigger=pgtrigger.compiler.Trigger(name='plan_path_descendants_trg', sql=pgtrigger.compiler.UpsertTriggerSql(condition='WHEN (not("new"."path" operator("public".=) "old"."path") and (coalesce("new"."path", "old"."path") is not null))', func='UPDATE tests_representation_testplan SET path = NEW.path || subpath(path, nlevel(OLD.path)),     tree_id = NEW.tree_id WHERE path <@ OLD.path AND id != NEW.id AND tree_id = OLD.tree_id; RETURN NEW;', hash='7222a00de2839b0b6d1c925404b3dd9cb45c9060', operation='UPDATE', pgid='pgtrigger_plan_path_descendants_trg_d4fba', table='tests_representation_testplan', when='AFTER')),
        ),
        pgtrigger.migrations.AddTrigger(
            model_name='testplan',
            trigger=pgtrigger.compiler.Trigger(name='plans_count_increment_statistics_on_insert', sql=pgtrigger.compiler.UpsertTriggerSql(func=' \n            UPDATE core_projectstatistics \n            SET plans_count = plans_count + 1 \n            WHERE project_id = NEW.project_id;\n            RETURN NEW;\n            ', hash='fdcc855b08d49634bd3f002b301d12687273e28a', operation='INSERT', pgid='pgtrigger_plans_count_increment_statistics_on_insert_53e1a', table='tests_representation_testplan', when='BEFORE')),
        ),
    ]
