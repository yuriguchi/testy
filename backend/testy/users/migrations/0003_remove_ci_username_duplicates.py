# Generated by Django 3.2.4 on 2023-06-07 09:17

from collections import defaultdict
import uuid

from django.db import migrations, models
import django.contrib.auth.validators
import testy.validators as validators


def rename_ci_username_duplicates(apps, schema_editor):
    Users = apps.get_model("users", "User")
    db_alias = schema_editor.connection.alias
    users = Users.objects.using(db_alias).all()

    duplicate_usernames = defaultdict(list)
    excluded_pk = set()
    for user in users:
        if user.pk not in excluded_pk:
            excluded_pk.add(user.pk)
            ci_duplicates = Users.objects.using(db_alias).filter(
                username__iexact=user.username
            ).exclude(pk__in=excluded_pk)
            if ci_duplicates.exists():
                for duplicate in ci_duplicates:
                    salt = str(uuid.uuid4())
                    old_name = duplicate.username
                    new_name = f'renamed_{salt}_{old_name}'[:150]
                    duplicate.username = new_name
                    duplicate.save()
                    excluded_pk.add(duplicate.pk)
                    duplicate_usernames[user.username].append(new_name)
    if duplicate_usernames:
        print('\nCase-insensitive duplicates found:')
        for original, duplicates in duplicate_usernames.items():
            print(f"'{original}': {duplicates}")


class Migration(migrations.Migration):

    dependencies = [
        ('users', '0002_user_config'),
    ]

    operations = [
        migrations.RunPython(rename_ci_username_duplicates, migrations.RunPython.noop),
        migrations.AlterField(
            model_name='user',
            name='username',
            field=models.CharField(error_messages={'unique': 'A user with that username already exists.'},
                                   help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.',
                                   max_length=150, unique=True,
                                   validators=[django.contrib.auth.validators.UnicodeUsernameValidator(),
                                               validators.CaseInsensitiveUsernameValidator()], verbose_name='username'),
        ),

    ]
